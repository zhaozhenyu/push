# -*- coding: utf-8 -*-

import numpy

from testing import ModuleTestBase, FunctionTestReturningFloat, StagedTest

class FunctionTestReturningArray (FunctionTestReturningFloat):

    def _test_type_ctor(self, test):
        return numpy.array

    def _check_answer(self, test, fvalue):
        ok, result = self._type_check_answer(test, fvalue)
        if not ok:
            return ok, result
        fvalue = result
        # check returned value matches (to precision):
        if len(fvalue) != len(test[1]):
            msg = "call " + self.name + str(self._get_test_args(test)) + \
                " returned answer " + str(fvalue) \
                + " of incorrect length " + str(len(fvalue)) \
                + "; the expected answer is " + str(test[1]) \
                + " of length " + str(len(test[1])) \
                + self._make_explanation(test)
            if self.raise_exceptions:
                raise Exception(msg)
            else:
                return False, msg
        for i in range(len(test[1])):
            if abs(fvalue[i] - test[1][i]) > self.precision:
                msg = "call " + self.name + str(self._get_test_args(test)) \
                    + " returned " + str(fvalue) \
                    + "; the expected answer is " + str(test[1]) \
                    + self._make_explanation(test) \
                    + " and the elements in position " + str(i) \
                    + " differ by " + str(abs(fvalue[i] - test[1][i])) \
                    + " > " + str(self.precision)
                if self.raise_exceptions:
                    raise Exception(msg)
                else:
                    return False, msg
        # all elements checked ok
        return True, "call " + self.name + str(self._get_test_args(test)) \
            + " ok"

    ## end class FunctionTestReturningArray

class Problem3Test (ModuleTestBase):

    fun_name = "moving_average"
    expl_str = "the windows are {}"

    s1_tests = (
        ((numpy.array([-1, 0, 0, -2, 1]), 2), numpy.array([-0.5, 0.0, -1.0, -0.5]), expl_str, [[-1, 0], [0, 0], [0, -2], [-2, 1]]),
        ((numpy.array([-1, 0, 0, -2, 1]), 3), numpy.array([-0.334, -0.667, -0.334]), expl_str, [[-1, 0, 0], [0, 0, -2], [0, -2, 1]]),
        ((numpy.array([-1, 0, 0, -2, 1]), 4), numpy.array([-0.75, -0.25]), expl_str, [[-1, 0, 0, -2], [0, 0, -2, 1]]),
        ((numpy.array([0, 1, 2, 0, 2]), 2), numpy.array([0.5, 1.5, 1.0, 1.0]), expl_str, [[0, 1], [1, 2], [2, 0], [0, 2]]),
        ((numpy.array([0, 1, 2, 0, 2]), 3), numpy.array([1.0, 1.0, 1.333]), expl_str, [[0, 1, 2], [1, 2, 0], [2, 0, 2]]),
        ((numpy.array([0, 1, 2, 0, 2]), 4), numpy.array([0.75, 1.25]), expl_str, [[0, 1, 2, 0], [1, 2, 0, 2]])
        )

    s2_tests = (
        ((numpy.array([-0.4, -0.4, 1.2, -1.6, 1.2]), 2), numpy.array([-0.4, 0.4, -0.2, -0.2]), expl_str, [[-0.4, -0.4], [-0.4, 1.2], [1.2, -1.6], [-1.6, 1.2]]),
        ((numpy.array([-0.4, -0.4, 1.2, -1.6, 1.2]), 3), numpy.array([0.133, -0.267, 0.266]), expl_str, [[-0.4, -0.4, 1.2], [-0.4, 1.2, -1.6], [1.2, -1.6, 1.2]]),
        ((numpy.array([-0.4, -0.4, 1.2, -1.6, 1.2]), 4), numpy.array([-0.3, 0.1]), expl_str, [[-0.4, -0.4, 1.2, -1.6], [-0.4, 1.2, -1.6, 1.2]]),
        ((numpy.array([0.8, 2.0, 0.2, 1.0, 0.4]), 2), numpy.array([1.4, 1.1, 0.6, 0.7]), expl_str, [[0.8, 2.0], [2.0, 0.2], [0.2, 1.0], [1.0, 0.4]]),
        ((numpy.array([0.8, 2.0, 0.2, 1.0, 0.4]), 3), numpy.array([1.0, 1.066, 0.533]), expl_str, [[0.8, 2.0, 0.2], [2.0, 0.2, 1.0], [0.2, 1.0, 0.4]]),
        ((numpy.array([0.8, 2.0, 0.2, 1.0, 0.4]), 4), numpy.array([1.0, 0.9]), expl_str, [[0.8, 2.0, 0.2, 1.0], [2.0, 0.2, 1.0, 0.4]])
        )

    s3_tests = (
        ((numpy.array([-1.5, -4.0, -3.0, 3.5, 4.5, 0.0, -3.5, -0.5, 4.0, 0.5]), 2), numpy.array([-2.75, -3.5, 0.25, 4.0, 2.25, -1.75, -2.0, 1.75, 2.25]), expl_str, [[-1.5, -4.0], [-4.0, -3.0], [-3.0, 3.5], [3.5, 4.5], [4.5, 0.0], [0.0, -3.5], [-3.5, -0.5], [-0.5, 4.0], [4.0, 0.5]]),
        ((numpy.array([-1.5, -4.0, -3.0, 3.5, 4.5, 0.0, -3.5, -0.5, 4.0, 0.5]), 5), numpy.array([-0.1, 0.2, 0.3, 0.8, 0.9, 0.1]), expl_str, [[-1.5, -4.0, -3.0, 3.5, 4.5], [-4.0, -3.0, 3.5, 4.5, 0.0], [-3.0, 3.5, 4.5, 0.0, -3.5], [3.5, 4.5, 0.0, -3.5, -0.5], [4.5, 0.0, -3.5, -0.5, 4.0], [0.0, -3.5, -0.5, 4.0, 0.5]]),
        ((numpy.array([-1.5, -4.0, -3.0, 3.5, 4.5, 0.0, -3.5, -0.5, 4.0, 0.5]), 8), numpy.array([-0.563, 0.125, 0.687]), expl_str, [[-1.5, -4.0, -3.0, 3.5, 4.5, 0.0, -3.5, -0.5], [-4.0, -3.0, 3.5, 4.5, 0.0, -3.5, -0.5, 4.0], [-3.0, 3.5, 4.5, 0.0, -3.5, -0.5, 4.0, 0.5]]),
        ((numpy.array([2.5, -1.0, 1.0, 3.5, -5.0, -0.5, 4.5, -5.0, 5.0, -3.5]), 2), numpy.array([0.75, 0.0, 2.25, -0.75, -2.75, 2.0, -0.25, 0.0, 0.75]), expl_str, [[2.5, -1.0], [-1.0, 1.0], [1.0, 3.5], [3.5, -5.0], [-5.0, -0.5], [-0.5, 4.5], [4.5, -5.0], [-5.0, 5.0], [5.0, -3.5]]),
        ((numpy.array([2.5, -1.0, 1.0, 3.5, -5.0, -0.5, 4.5, -5.0, 5.0, -3.5]), 5), numpy.array([0.2, -0.4, 0.7, -0.5, -0.2, 0.1]), expl_str, [[2.5, -1.0, 1.0, 3.5, -5.0], [-1.0, 1.0, 3.5, -5.0, -0.5], [1.0, 3.5, -5.0, -0.5, 4.5], [3.5, -5.0, -0.5, 4.5, -5.0], [-5.0, -0.5, 4.5, -5.0, 5.0], [-0.5, 4.5, -5.0, 5.0, -3.5]]),
        ((numpy.array([2.5, -1.0, 1.0, 3.5, -5.0, -0.5, 4.5, -5.0, 5.0, -3.5]), 8), numpy.array([0.0, 0.312, 0.0]), expl_str, [[2.5, -1.0, 1.0, 3.5, -5.0, -0.5, 4.5, -5.0], [-1.0, 1.0, 3.5, -5.0, -0.5, 4.5, -5.0, 5.0], [1.0, 3.5, -5.0, -0.5, 4.5, -5.0, 5.0, -3.5]]),
        ((numpy.array([2.5, -2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0, -2.0]), 2), numpy.array([0.25, -2.25, 0.0, 1.0, -1.5, -1.0, -2.25, -0.25, 0.0, -0.75, 3.25, -0.25, -1.5, 3.0, 3.0, 0.0, 0.5, 3.0, 1.0]), expl_str, [[2.5, -2.0], [-2.0, -2.5], [-2.5, 2.5], [2.5, -0.5], [-0.5, -2.5], [-2.5, 0.5], [0.5, -5.0], [-5.0, 4.5], [4.5, -4.5], [-4.5, 3.0], [3.0, 3.5], [3.5, -4.0], [-4.0, 1.0], [1.0, 5.0], [5.0, 1.0], [1.0, -1.0], [-1.0, 2.0], [2.0, 4.0], [4.0, -2.0]]),
        ((numpy.array([2.5, -2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0, -2.0]), 5), numpy.array([0.0, -1.0, -0.5, -1.0, -0.6, -1.4, -0.3, 0.3, 0.5, -0.2, 1.7, 1.3, 0.4, 1.6, 2.2, 0.8]), expl_str, [[2.5, -2.0, -2.5, 2.5, -0.5], [-2.0, -2.5, 2.5, -0.5, -2.5], [-2.5, 2.5, -0.5, -2.5, 0.5], [2.5, -0.5, -2.5, 0.5, -5.0], [-0.5, -2.5, 0.5, -5.0, 4.5], [-2.5, 0.5, -5.0, 4.5, -4.5], [0.5, -5.0, 4.5, -4.5, 3.0], [-5.0, 4.5, -4.5, 3.0, 3.5], [4.5, -4.5, 3.0, 3.5, -4.0], [-4.5, 3.0, 3.5, -4.0, 1.0], [3.0, 3.5, -4.0, 1.0, 5.0], [3.5, -4.0, 1.0, 5.0, 1.0], [-4.0, 1.0, 5.0, 1.0, -1.0], [1.0, 5.0, 1.0, -1.0, 2.0], [5.0, 1.0, -1.0, 2.0, 4.0], [1.0, -1.0, 2.0, 4.0, -2.0]]),
        ((numpy.array([2.5, -2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0, -2.0]), 8), numpy.array([-0.875, -0.625, -0.938, -0.25, -0.125, -0.563, -0.125, 0.437, 1.187, 0.5, 1.312, 1.437, 0.75]), expl_str, [[2.5, -2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0], [-2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5], [-2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5], [2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0], [-0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5], [-2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0], [0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0], [-5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0], [4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0], [-4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0], [3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0], [3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0], [-4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0, -2.0]]),
        ((numpy.array([2.5, -2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0, -2.0]), 13), numpy.array([-0.347, -0.462, 0.076, 0.346, 0.076, 0.269, 0.769, 0.576]), expl_str, [[2.5, -2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0], [-2.0, -2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0], [-2.5, 2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0], [2.5, -0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0], [-0.5, -2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0], [-2.5, 0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0], [0.5, -5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0], [-5.0, 4.5, -4.5, 3.0, 3.5, -4.0, 1.0, 5.0, 1.0, -1.0, 2.0, 4.0, -2.0]]),
        ((numpy.array([-2.5, 3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5, 0.5]), 2), numpy.array([0.5, 1.75, 1.75, 2.25, -0.75, -3.25, -1.25, -1.0, -3.25, -0.75, 0.75, 0.75, -1.0, -3.75, -0.25, 4.0, 3.5, 1.5, 0.5]), expl_str, [[-2.5, 3.5], [3.5, 0.0], [0.0, 3.5], [3.5, 1.0], [1.0, -2.5], [-2.5, -4.0], [-4.0, 1.5], [1.5, -3.5], [-3.5, -3.0], [-3.0, 1.5], [1.5, 0.0], [0.0, 1.5], [1.5, -3.5], [-3.5, -4.0], [-4.0, 3.5], [3.5, 4.5], [4.5, 2.5], [2.5, 0.5], [0.5, 0.5]]),
        ((numpy.array([-2.5, 3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5, 0.5]), 5), numpy.array([1.1, 1.1, -0.4, -0.1, -1.5, -2.3, -1.5, -0.7, -0.7, -0.7, -0.9, -0.5, 0.4, 0.6, 1.4, 2.3]), expl_str, [[-2.5, 3.5, 0.0, 3.5, 1.0], [3.5, 0.0, 3.5, 1.0, -2.5], [0.0, 3.5, 1.0, -2.5, -4.0], [3.5, 1.0, -2.5, -4.0, 1.5], [1.0, -2.5, -4.0, 1.5, -3.5], [-2.5, -4.0, 1.5, -3.5, -3.0], [-4.0, 1.5, -3.5, -3.0, 1.5], [1.5, -3.5, -3.0, 1.5, 0.0], [-3.5, -3.0, 1.5, 0.0, 1.5], [-3.0, 1.5, 0.0, 1.5, -3.5], [1.5, 0.0, 1.5, -3.5, -4.0], [0.0, 1.5, -3.5, -4.0, 3.5], [1.5, -3.5, -4.0, 3.5, 4.5], [-3.5, -4.0, 3.5, 4.5, 2.5], [-4.0, 3.5, 4.5, 2.5, 0.5], [3.5, 4.5, 2.5, 0.5, 0.5]]),
        ((numpy.array([-2.5, 3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5, 0.5]), 8), numpy.array([0.062, -0.063, -0.875, -0.688, -1.125, -1.063, -1.188, -1.188, -0.938, 0.062, 0.75, 0.625, 0.687]), expl_str, [[-2.5, 3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5], [3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5], [0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0], [3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5], [1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0], [-2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5], [-4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5], [1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0], [-3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5], [-3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5], [1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5], [0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5], [1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5, 0.5]]),
        ((numpy.array([-2.5, 3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5, 0.5]), 13), numpy.array([-0.231, -0.308, -0.885, -0.616, -0.539, -0.424, -0.193, 0.153]), expl_str, [[-2.5, 3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5], [3.5, 0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5], [0.0, 3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0], [3.5, 1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5], [1.0, -2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5], [-2.5, -4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5], [-4.0, 1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5], [1.5, -3.5, -3.0, 1.5, 0.0, 1.5, -3.5, -4.0, 3.5, 4.5, 2.5, 0.5, 0.5]])
        )

    def run_function_tests(self, _suppress_output = False):
        ok, fun, msg = self.find_function(self.fun_name)
        if not ok:
            return False, msg
        if fun is None:
            return False, msg
        fts = [ FunctionTestReturningArray \
                    (fun, tset, 1e-2,
                     verbose = self.verbose - 1,
                     raise_exceptions = self.raise_exceptions,
                     suppress_output = _suppress_output)
                for tset in (self.s1_tests, self.s2_tests, self.s3_tests) ]
        st = StagedTest(fts, self.verbose, self.raise_exceptions)
        ok, msg = st.run()
        return ok, msg

    def run(self):
        print("checking function " + self.fun_name +
              " in file " + self.filepath)
        print()
        ok, msg = self.run_function_tests(False)
        print(msg)

    ## end Problem3Test


## To produce less verbose output, change verbose from 3 to 2 or 1:

Problem3Test("problem3.py", verbose = 3).run()
